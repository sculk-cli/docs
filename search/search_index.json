{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Warning</p> <p>Sculk is still in early development and may be unstable</p> <p>Sculk is a CLI tool for creating Minecraft modpacks, much like Packwiz. It is aimed at modpack creators, rather than users (for users, a program such as Ferium is recommended)</p>"},{"location":"#why-sculk","title":"Why Sculk?","text":"<ul> <li>Multi-source support: Sculk allows one mod to have multiple sources (e.g.   Curseforge, Modrinth, and a URL). This means that you can export Modrinth and   Curseforge modpacks from the same Sculk modpack.</li> <li>Content support: Sculk supports mods, datapacks, resource packs, and   shader packs - as well as any other files you want to include in your modpack   (e.g. config).</li> <li>Ease of use: Sculk is designed to be easy to use, with a simple   command-line interface (with nice prompts!).</li> <li>Import support: Sculk allows you to convert an existing Modrinth,   Curseforge, or Packwiz modpack into a Sculk modpack.</li> <li>Dependency management: Sculk automatically installs dependencies for you,   and will keep track of them so that they can be removed if their dependant is.</li> <li>[Planned] Rollback system: Sculk keeps track of changes made to the   modpack, so that you can easily revert changes - because it's too easy to   forget to keep your Git commits granular.</li> <li>[Planned] Publishing support: Sculk can export to Curseforge and   Modrinth modpacks, and can even publish them for you from the command line.</li> </ul>"},{"location":"#how","title":"How?","text":"<p>TODO: packaging solution and docs on it here</p> <p>Once Sculk is installed and on your <code>PATH</code>, you can follow the getting started guide. The 'How It Works' page is also recommended before you begin.</p> <p>There is also documentation on specific commands and the manifest format Sculk uses, which can be found in the navbar.</p>"},{"location":"how-it-works/","title":"How It Works","text":"<p>A Sculk modpack is comprised of a root manifest (<code>manifest.sculk.json</code>), many file manifests (such as <code>mods/sodium.sculk.json</code>), and other files (such as <code>config/sodium.json</code>).</p> <p>The root manifest stores metadata about the modpack, such as its name and Minecraft version, as well as a list of manifests and files:</p> <ul> <li>Manifests store metadata about specific file downloads. They include metadata   such as the files name and its installation side. They also include the data   required to download the file from either of 3 sources: Modrinth, Curseforge,   or a direct URL. File manifests can include multiple sources, so that the most   appropriate one can be used when exporting (i.e. use the Modrinth metadata to   export to a Modrinth pack, but the Curseforge metadata to export to a   Curseforge pack).</li> <li>Files are directly stored on the file system (rather than being a manifest).   The root manifest stores their path, installation side (e.g. for client-side   only configs), and their SHA256 hash for integrity checking.</li> </ul> <p></p>"},{"location":"how-it-works/#dependency-tracking","title":"Dependency Tracking","text":"<p>When you add a mod from Modrinth or Curseforge, Sculk automatically recursively adds its dependencies to the pack if they do not already exist. Sculk also tracks these dependencies so that if you remove the dependant mod in the future, the dependencies can also be removed (assuming no other mods require them). Let's use an example:</p> <ol> <li>You add Utility Belt to your empty Fabric modpack using    <code>sculk mr add utility-belt</code>. This adds Utility Belt, Architectury API,    JamLib, Trinkets, and Fabric API.</li> </ol> <p>The dependency graph, stored at <code>dependency-graph.sculk.json</code>, now looks like    this:</p> <pre><code>{\n  \"mods/trinkets.sculk.json\": [\n    \"mods/utility-belt.sculk.json\"\n  ],\n  \"mods/fabric-api.sculk.json\": [\n    \"mods/utility-belt.sculk.json\",\n    \"mods/architectury-api.sculk.json\",\n    \"mods/jamlib.sculk.json\"\n  ],\n  \"mods/architectury-api.sculk.json\": [\n    \"mods/jamlib.sculk.json\",\n    \"mods/utility-belt.sculk.json\"\n  ],\n  \"mods/jamlib.sculk.json\": [\n    \"mods/utility-belt.sculk.json\"\n  ]\n}\n</code></pre> <p>The graph stores a list of <code>&lt;dependency mod&gt;</code> to a list of its <code>&lt;dependant mods&gt;</code></p> <ol> <li>You also add Wake Up Time, which does not add any other dependencies since    they are already satisfied. It does, however, add itself to the dependency    graph:</li> </ol> <pre><code>{\n  \"mods/trinkets.sculk.json\": [\n    \"mods/utility-belt.sculk.json\"\n  ],\n  \"mods/fabric-api.sculk.json\": [\n    \"mods/utility-belt.sculk.json\",\n    \"mods/architectury-api.sculk.json\",\n    \"mods/jamlib.sculk.json\",\n    \"mods/wake-up-time.sculk.json\"\n  ],\n  \"mods/architectury-api.sculk.json\": [\n    \"mods/jamlib.sculk.json\",\n    \"mods/utility-belt.sculk.json\",\n    \"mods/wake-up-time.sculk.json\"\n  ],\n  \"mods/jamlib.sculk.json\": [\n    \"mods/utility-belt.sculk.json\",\n    \"mods/wake-up-time.sculk.json\"\n  ]\n}\n</code></pre> <ol> <li>You decide to remove Utility Belt. This also removed Trinkets, since Trinkets    has no more dependants.</li> <li>You also want to remove Wake Up Time. This removes JamLib, Architectury API,    and Fabric API, since they also have no more dependants.</li> </ol>"},{"location":"how-it-works/#exporting","title":"Exporting","text":"<p>There are 3 methods for exporting/installing a Sculk modpack:</p> <ol> <li>Direct Install (<code>sculk install</code>): this method directly downloads a Sculk    manifest and traverses it to download all the files for the selected side.    When a manifest is encountered, it downloads the file from one of the sources    that manifest specifies, and when a file is encountered it copies it over to    the correct folder.</li> <li>Modrinth Export (<code>sculk export mr</code>): this method exports a Modrinth <code>mrpack</code>    modpack. For manifests, it uses either the Modrinth or URL source (assuming    the URL source is on the allowed URL list), and for files it copies them into    the common, client, or server override folder in the modpack.</li> <li>Curseforge Export (<code>sculk export cf</code>): this method exports a Curseforge    <code>.zip</code> modpack. It functions similarly to the Modrinth export, but uses the    Curseforge source.</li> </ol>"},{"location":"guides/getting-started/","title":"Getting Started","text":"<p>This page assumes you have read 'How It Works'</p> <p>There are two ways to start a Sculk modpack:</p> <ol> <li>Using the <code>sculk init</code> command. Enter a new empty    directory in the command line, and run the init command. You will be prompted    for several inputs before a skeleton modpack is created.</li> <li>Importing an existing pack from Modrinth or Curseforge (Packwiz import    support is planned in the future): run    <code>sculk import mr &lt;path to .mrpack&gt;</code> or    <code>sculk import cf &lt;path to curseforge pack .zip&gt;</code>.    This imports all of the projects and files from the existing modpack,    converting them to Sculk manifests where possible.</li> </ol> <p>You can also look at the example modpack for an example of a fully functioning pack that implements all of the guides on this site.</p> <p>Info</p> <p>You can type to filter list prompts such as the Minecraft version prompt.</p> <p>Use the <code>sculk add mr &lt;search query or mod slug&gt;</code>, <code>sculk add cf &lt;search query or mod slug&gt;</code>, or <code>&lt;sculk add url&gt;</code> commands to add mods (or shaderpacks, datapacks, etc.) to your modpack. To add files such as configs, just place the file in the correct folder and run <code>sculk refresh</code>.</p> <p>Info</p> <p>If you have a file which you do not want to be added when you run <code>sculk refresh</code>, add it to a <code>.sculkignore</code> file.</p> <p>To test your modpack, run <code>sculk install &lt;path to modpack folder&gt;</code> in a <code>.minecraft</code> folder - you can add this as a pre-launch command if your launcher supports it.</p> <p>Once you are familiar with the basics, you can take a look at the other guides on this site, as well as documentation for specific commands.</p>"}]}